
env READMEFILE=README.md

# Change permissions of one of the files
chmod 643 license.txt

# Build binaries.
hugoreleaser build -tag v1.2.0
! stderr .

exists $WORK/dist/hugo/v1.2.0/builds/main/base/darwin/amd64/hugo
exists $WORK/dist/hugo/v1.2.0/builds/main/base/darwin/arm64/hugo
exists $WORK/dist/hugo/v1.2.0/builds/main/base/linux/amd64/hugo
exists $WORK/dist/hugo/v1.2.0/builds/main/base/linux/arm/hugo
exists $WORK/dist/hugo/v1.2.0/builds/main/base/windows/amd64/hugo.exe

# Check Go binaries vs build settings.
gobinary $WORK/dist/hugo/v1.2.0/builds/main/base/darwin/amd64/hugo CGO_ENABLED=0.*GOARCH=amd64\b.*GOOS=darwin
gobinary $WORK/dist/hugo/v1.2.0/builds/main/base/darwin/arm64/hugo CGO_ENABLED=0.*GOARCH=arm64\b.*GOOS=darwin
gobinary $WORK/dist/hugo/v1.2.0/builds/main/base/linux/arm/hugo CGO_ENABLED=0.*GOARCH=arm\b
gobinary $WORK/dist/hugo/v1.2.0/builds/main/base/windows/amd64/hugo.exe CGO_ENABLED=0

# Build archives
hugoreleaser archive -tag v1.2.0
! stderr .
stdout 'Archive file.*macOS-64bit'

ls $WORK/dist/hugo/v1.2.0/builds/main/base/darwin/amd64
# Re. Windows, see comment below.
[!windows] stdout '-rwxr-xr-x 0755 hugo'

# Check some samples.
exists $WORK/dist/hugo/v1.2.0/archives/main/base/darwin/amd64/hugo_1.2.0_macOS-64bit.tar.gz
exists $WORK/dist/hugo/v1.2.0/archives/main/base/linux/amd64/hugo_1.2.0_linux-64bit.tar.gz
exists  $WORK/dist/hugo/v1.2.0/archives/main/base/windows/amd64/hugo_1.2.0_Windows-64bit.zip
! exists $WORK/dist/hugo/v1.2.0/archives/main/base/linux/amd64/hugo_1.2.0_linux-64bit.zip
! exists $WORK/dist/hugo/v1.2.0/archives/main/base/darwin/arm64/hugo_1.2.0_macOS-ARM64.tar.gz

printarchive $WORK/dist/hugo/v1.2.0/archives/main/base/linux/amd64/hugo_1.2.0_linux-64bit.tar.gz
# This prints 0666 hugo on Windows
# This is a big topic that I'm not prepared to take on now, see https://github.com/golang/go/issues/41809
[!windows] stdout '-rwxr-xr-x 0755 hugo'

# TODO(bep) check why these fail on Windows. 
# It looks like nothing gets printed, so I suspect it's printarchive that somehow fails.
[!windows] stdout '-rw-r--r-- 0644 README.md'
[!windows] stdout '-rw-r---wx 0643 license.txt'
[!windows] stdout '-rw-r---w- 0642 subdir/myconfig.yaml'

# Test files
-- hugoreleaser.yaml --
project: hugo
build_settings:
  binary: hugo
archive_settings:
  name_template: "{{ .Project }}_{{ .Tag | trimPrefix `v` }}_{{ .Goos }}-{{ .Goarch }}"
  extra_files:
    - source_path: ${READMEFILE}
      target_path: README.md
    - source_path: license.txt
      target_path: license.txt
    - source_path: hugoreleaser.yaml
      target_path: subdir/myconfig.yaml
      mode: 418
  type:
    format: tar.gz
    extension: .tar.gz
  replacements:
    "386": 32bit
    amd64: 64bit
    arm64: ARM64
    darwin: macOS
    windows: Windows
builds:
  - path: main/base
    build_settings:
      env:
        - CGO_ENABLED=0
      ldflags: -s -w -X github.com/gohugoio/hugo/common/hugo.vendorInfo=gohugoio
      flags:
        - -buildmode
        - exe
    os:
      - goos: darwin
        archs:
          - goarch: amd64
          - goarch: arm64
      - goos: linux
        archs:
          - goarch: amd64
          - goarch: arm
      - goos: windows
        build_settings:
          binary: hugo.exe
        archs:
          - goarch: amd64
archives:
  - paths:
      - builds/**/{darwin,linux}/amd64
    archive_settings: {}
  - paths:
      - builds/**/windows/*
    archive_settings:
      type:
        format: zip
        extension: .zip


-- go.mod --
module foo
-- main.go --
package main
func main() {

}
-- README.md --
This is readme.
-- license.txt --
This is license.