env GOPATH=$WORK/gopath
env GITHUB_TOKEN=faketoken

# Skip build, use these fake binaries.
dostounix dist/hugo/v1.2.0/builds/main/base/linux/amd64/hugo
dostounix expected/dist/myrelease/checksums.txt

# Build archives
hugoreleaser archive -tag v1.2.0
! stderr .
exists $WORK/dist/hugo/v1.2.0/archives/main/base/linux/amd64/hugo_1.2.0_linux-64bit.tar.gz
exists $WORK/dist/hugo/v1.2.0/archives/main/base/linux/amd64/hugo_1.2.0_linux-amd64-alias.tar.gz

# Run with the a faketoken to avoid actually creating a remote release.
hugoreleaser release -tag v1.2.0 -commitish main
# 2 archives + checksums.txt
stdout 'Prepared 3 files to archive'
stdout 'hugo_1.2.0_checksums\.txt'
cmp $WORK/dist/hugo/v1.2.0/releases/myrelease/hugo_1.2.0_checksums.txt $WORK/expected/dist/myrelease/checksums.txt

# Test files
# Release notes
-- temp/my-release-notes.md --
## Release notes
* Change 1
# Fake binary to get stable archive checksums.txt.
-- dist/hugo/v1.2.0/builds/main/base/linux/amd64/hugo --
linux-amd64


# Expected output
-- expected/dist/myrelease/checksums.txt --
b5bdae6077aadd1c9fccb2ebf25a5305213e4b460c6827277590c8564a231f4a  hugo_1.2.0_linux-64bit.tar.gz
b5bdae6077aadd1c9fccb2ebf25a5305213e4b460c6827277590c8564a231f4a  hugo_1.2.0_linux-amd64-alias.tar.gz
-- hugoreleaser.toml --
project = "hugo"
archive_alias_replacements = { "linux-64bit" = "linux-amd64-alias" }
[release_settings]
type = "github"
repository = "hugoreleaser"
repository_owner = "bep"
draft = true
[release_settings.release_notes_settings]
filename = "temp/my-release-notes.md"
[build_settings]
binary = "hugo"
flags = ["-trimpath"]
[archive_settings]
name_template = "{{ .Project }}_{{ .Tag | trimPrefix `v` }}_{{ .Goos }}-{{ .Goarch }}"
[archive_settings.type]
format        = "rename"
extension = ".tar.gz"
[archive_settings.replacements]
amd64 ="64bit"
386 = "32bit"
arm64 = "ARM64"
darwin = "macOS"
windows = "Windows"

[[builds]]
path = "main/base"
[builds.build_settings]
env = ["CGO_ENABLED=0"]
ldflags = "-s -w -X github.com/gohugoio/hugo/common/hugo.vendorInfo=gohugoio"
flags = ["-buildmode", "exe"]


[[builds.os]]
goos = "linux"
[[builds.os.archs]]
goarch = "amd64"
[[builds.os.archs]]
goarch = "arm"


[[archives]]
paths         = ["builds/**/{darwin,linux}/amd64"]
[archives.archive_settings]
[[archives]]
paths         = ["builds/**/windows/*"]
[archives.archive_settings]
[archives.archive_settings.type]
format = "rename"
extension = ".zip"

[[releases]]
paths = ["archives/**"]
path = "myrelease"

-- go.mod --
module foo
-- main.go --
package main
func main() {

}

