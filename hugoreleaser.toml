project = "hugoreleaser"

# Go settings can be set on any of Project > Build.
# See Build settings for merge rules.
[go_settings]
    #  go_proxy will be used to set GOPROXY when running Go.
    # It will default to 'https://proxy.golang.org' if not set.
    #
    #  See https://proxy.golang.org/ for more information.
    go_proxy = "https://proxy.golang.org"
    go_exe   = "go"

# Build settings can be set on any of Project > Build > Goos > Goarch.
# Zero values (empty strings, 0 numbers) and nil slices/maps wil inherit values from the nearest non-zero value above for a key.
# Empty slices and maps will stay empty (e.g. `env = []`)
[build_settings]
    binary  = "hugoreleaser"
    flags   = ["-buildmode", "exe"]
    env     = ["CGO_ENABLED=0"]
    ldflags = ""

# Archive settings can be set on any of Project > Archive.
# Follows the same merge rules as Build settings.
[archive_settings]
    name_template = "{{ .Project }}_{{ .Tag | trimPrefix `v` }}_{{ .Goos }}-{{ .Goarch }}"
    # Extra, as in: In addition to the binary.
    extra_files = [
        { source_path = "README.md", target_path = "README.md" },
        { source_path = "LICENSE", target_path = "LICENSE" },
    ]
    [archive_settings.type]
        format    = "tar.gz"
        extension = ".tar.gz"

[release_settings]
    name             = "${HUGORELEASER_TAG}"
    type             = "github"
    repository       = "hugoreleaser"
    repository_owner = "gohugoio"

    draft      = true
    prerelease = false

    [release_settings.release_notes_settings]
        # Use Hugoreleaser's autogenerated release notes.
        generate = true
        # Enable this to use GitHub's autogenerated release notes.
        generate_on_host = false

        # Set this if you have release notes file ready to use.
        filename = ""

        # A custom template filename for Hugoreleaser's autogenerated release notes.
        # Will fall back to the default if not set.
        template_filename = ""

        # Collapse relases with < 10 changes below one title.
        short_threshold = 10
        short_title     = "What's Changed"

        groups = [
            # Group the changes in the release notes by title.
            # You need at least one.
            # The groups will be tested in order until a match is found.
            # The titles will, by default, be listed in the given order in the release note.
            # You can set an optional ordinal to adjust the order (as in the setup below).
            # Any match with ignore=true will be dropped.
            { regexp = "snapcraft:|Merge commit|Squashed", ignore = true },
            { title = "Bug fixes", regexp = "fix", ordinal = 20 },
            { title = "Dependency Updates", regexp = "deps", ordinal = 30 },
            { title = "Documentation", regexp = "doc", ordinal = 40 },
            { title = "Improvements", regexp = ".*", ordinal = 10 },
        ]

[[builds]]
    # User-defined path. Can be used to partition the build/archive step, e.g.:
    #
    #     hugoreleaser build -paths "builds/unix/**"
    #
    # The above would only build binaries matching the given path ("Unix binaries").
    path = "unix"

    [[builds.os]]
        goos = "darwin"
        [[builds.os.archs]]
            goarch = "universal"

    [[builds.os]]
        goos = "linux"
        [[builds.os.archs]]
            goarch = "amd64"

[[builds]]
    path = "windows"

    [[builds.os]]
        goos = "windows"
        [builds.os.build_settings]
            binary = "hugo.exe"
        [[builds.os.archs]]
            goarch = "amd64"

[[archives]]
    paths = ["builds/unix/**"]
[[archives]]
    paths = ["builds/**/linux/amd64"]
    [archives.archive_settings]
        [archives.archive_settings.type]
            # When format is _plugin,
            # archive_settings.plugin must also be configured.
            format    = "_plugin"
            extension = ".deb"
        [archives.archive_settings.plugin]
            id = "deb"
            # gorun is currently the only type.
            type = "gorun"
            # If the plugin source lives locally, this can also be a file path,
            # e.g. './myplugin'. In those setups you may need to set dir to the directory path,
            # and use "." for the command.
            command = "github.com/gohugoio/hugoreleaser-archive-plugins/deb@latest"
        [archives.archive_settings.custom_settings]
            # Custom settings as defined by the Deb plugin.
            vendor      = "gohugo.io"
            homepage    = "https://github.com/gohugoio/hugoreleaser"
            maintainer  = "BjÃ¸rn Erik Pedersen <bjorn.erik.pedersen@gmail.com>"
            description = "Build, archive and release Go programs."
            license     = "Apache-2.0"
[[archives]]
    paths = ["builds/windows/**"]
    [archives.archive_settings]
        [archives.archive_settings.type]
            format    = "zip"
            extension = ".zip"

[[releases]]
    paths = ["archives/**"]
    # In this file we have only one release, but path can be used to partition the release step, e.g.:
    #    hugoreleaser release -paths "releases/myrelease"
    path = "myrelease"
